name: Test

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: "From which folder this pipeline executes"
      ci-timeout:
        # To avoid being billed 360 minutes if a step does not terminate
        # (we've seen the setup-python step below do so!)
        description: "The timeout of the ci job. Default is 25min"
        default: 25
        type: number

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.5.1"
      - name: Setup a local virtual environment
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the lint dependencies
        run: poetry install --only lint
      - name: Lint
        run: poetry run bash scripts/lint.sh

  test:
    needs: [lint]
    runs-on: ubuntu-latest
    environment:
      name: approvers
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.5.1"
      - name: Setup a local virtual environment
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install --with test
      - name: Test
        run: poetry run bash scripts/test.sh
      - run: ls
      - name: Store coverage files
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: ./.coverage

  coverage-combine:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Get coverage files
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: ./.coverage
      - run: pip install coverage[toml]
      - run: ls -la .coverage
      - run: coverage combine .coverage
      - run: coverage report
      - run: coverage html --show-contexts --title "Coverage for ${{ github.sha }}"
      - name: Store coverage HTML
        uses: actions/upload-artifact@v3
        with:
          name: coverage-html
          path: htmlcov